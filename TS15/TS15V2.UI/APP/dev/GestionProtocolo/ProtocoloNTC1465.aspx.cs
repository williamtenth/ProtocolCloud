///////////////////////////////////////////////////////////
//  Protocolo_NTC1465.cs
//  Implementation of the Class Protocolo_NTC1465
//  Generated by Enterprise Architect
//  Created on:      25-abr.-2015 1:27:14 a. m.
//  Original author: william_cuadros
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using TS15.BL.gestion_protocolo;
using TS15.Common.Generated;
using TS15V2.UI.APP.abstractUI;
using TS15V2.UI.APP.util;

namespace TS15V2.UI.APP.dev.GestionProtocolo
{
    public partial class ProtocoloNTC1465 : GenericoProtocolo, IGestionable, ITerminable
    {
       
        // Datos
        private pro_ntc1465 _prueba;
        private BOProtocolo_NTC1465 _BOntc1465bject;
        private List<gen_parametrica> listTipAislante;
        private List<gen_parametrica> listTipAislante;
        private List<gen_parametrica> listTipAislante;

        // Constructores

        public ProtocoloNTC1465()
        {
            _BOntc1465bject = new BOProtocolo_NTC1465();
        }

        // Métodos

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
            {
                CargarListas();
                CargarPrueba();

                // Se oculta la botonera si la prueba tiene resultado
                if (_prueba != null && _prueba.resultado != null)
                    pnlBotonera.Visible = false;
            }
        }

        public void CargarListas()
        {

        }

        /// 
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Crear(object sender, EventArgs e)
        {

        }

        /// 
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Terminar(object sender, EventArgs e)
        {

        }

        /// 
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Eliminar(object sender, EventArgs e)
        {

        }

        /// <summary>
        /// Este método carga la última prueba del transformador.
        /// </summary>
        public override void CargarPrueba()
        {
            if (Transformador != null)
            {
                _prueba = (pro_ntc1465)_BOntc1465bject.ObtenerUltimaPrueba(Transformador);
                CargarEntidad();
            }
            else
            {
                _prueba = new pro_ntc1465();
                _prueba.fecha = new DateTime();
            }
        }

        public void CargarEntidad()
        {
            if (_prueba != null)
            {
                this.lbLiquidoAislante.SelectedValue = Convert.ToString(_prueba.tipaislante);
                this.lbReferencia.SelectedValue = Convert.ToString(_prueba.refaislante);
                this.txtRuptura.Text = Convert.ToString(_prueba.ruptura);
                this.lbMetodo.SelectedValue = Convert.ToString(_prueba.metaislante);
                this.lbResultado.SelectedValue = Convert.ToString(_prueba.resultado);
                
                Session[VariablesGlobales.SESION_PRUEBA_NTC1465] = _prueba;
            }
        }

        /// 
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Modificar(object sender, EventArgs e)
        {
            ActivarControles(true);
        }

        /// 
        /// <param name="activar"></param>
        public void ActivarControles(bool activar)
        {
            this.txtRuptura.Enabled = activar;
            this.lbResultado.Enabled = activar;
        }

        /// 
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Guardar(object sender, EventArgs e)
        {

        }

        /// 
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public void Cancelar(object sender, EventArgs e)
        {
            ActivarControles(false);
        }

        /// <summary>
        /// Permite validar los campos obligatorios del formulario.
        /// </summary>
        public bool ValidarCampos()
        {

            return false;
        }
    }
}